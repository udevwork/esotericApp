//
//  HomeView.swift
//  esotericApp
//
//  Created by Denis Kotelnikov on 03.11.2023.
//

import Foundation
import SwiftUI
import Combine

class HomeModel: ObservableObject {
    var subscriptions = Set<AnyCancellable>()
    var gpt = GPTService()

    init() {
        User.shared.$isProUser.sink {_ in
            self.objectWillChange.send()
        }.store(in: &subscriptions)
        gpt.test(promt: "–ü—Ä–∏–¥—É–º–∞–π –º–Ω–µ –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –¥–µ–Ω—å. –ü–∞—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.") { result in
            print(result)
        }
    }
}

struct HomeView: View {

    @Environment(\.openURL) var openURL
    @EnvironmentObject var mainModel: MainViewModel
    @StateObject var model: HomeModel = HomeModel()
    @Namespace private var namespace
    @State private var showingSheet = false
    @State var animate: Bool = false
    @State var finish: Bool = false

    var body: some View {
        ZStack {
            if animate == false {
                ScrollView(.vertical, showsIndicators: false) {
                    Image("homescreenheader")
                        .resizable()
                        .aspectRatio(contentMode: .fill)
                        .frame(width: UIScreen.main.bounds.width, height: 30)
                    VStack (alignment: .leading, spacing: 20) {
                        HStack(spacing: 16) {
                            EmodjiIcon(iconText: "üîÆ")
                            VStack(alignment: .leading, spacing: 1) {
                                SectionTitleView(text: "–ö–∞—Ä—Ç–∞ —Ç–∞—Ä–æ", alignment: .leading)
                                ArticleView(text: "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–Ω—è", alignment: .leading)
                            }
                        }.padding(.horizontal,16)
                        HorMenuSnap()
                            .frame(height: 300)
                        if User.shared.isProUser == false {
                            ScreenContentView(color: .clear) {
                                VStack(alignment: .leading, spacing: 28) {
                                    VStack(alignment: .leading, spacing: 8) {
                                        SectionTitleView(textColor: .white, text: "–ì–∞–¥–∞–Ω–∏–µ –ø–æ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–µ", alignment: .leading)
                                            .padding(.horizontal, horPadding)
                                        ArticleView(textColor: .white, text: "—Å–∞–º–æ–µ —á–µ—Ç–∫–æ–µ, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–µ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –æ—Ç–≤–ª–µ—á—å—Å—è –Ω–∞ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –º—ã—Å–ª–∏ –∏ –∏–¥–µ–∏.").padding(.horizontal, horPadding)
                                    }
                                    NavigationLink {
                                        CardsTableView(model: CardsTableViewModel(cardsNum: 1))
                                    } label: {
                                        Text("–ì–∞–¥–∞–Ω–∏–µ –ø–æ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–µ")
                                    }.DefButtonStyle()
                                        .padding(.horizontal, horPadding)
                                    NavigationLink {
                                        CardsTableView(model: CardsTableViewModel(cardsNum: 3))
                                    } label: {
                                        Text("–ì–∞–¥–∞—Ç—å –Ω–∞ 3—Ö –∫–∞—Ä—Ç–∞—Ö")
                                    }.DefButtonStyle()
                                        .padding(.horizontal, horPadding)
                                    NavigationLink {
                                        CardsTableView(model: CardsTableViewModel(cardsNum: 5))
                                    } label: {
                                        Text("–û—Ç–∫—Ä—ã—Ç—å 5 –∫–∞—Ä—Ç")
                                    }.DefButtonStyle()
                                        .padding(.horizontal, horPadding)
                                    Button {
                                        showingSheet.toggle()
                                    } label: {
                                        Text("–ü–æ–¥–ø–∏—Å–∫–∞")
                                    }.DefButtonStyle()
                                        .sheet(isPresented: $showingSheet) {
                                            SubscriptionView()
                                        }
                                        .padding(.horizontal, horPadding)
                                }.background {
                                    Image("esoteric")
                                        .resizable()
                                        .aspectRatio(contentMode: .fill)
                                        .opacity(0.1)
                                        .scaleEffect(0.9)
                                }
                            }
                        }
                        VStack(alignment: .leading,spacing: 10) {
                            SectionTitleView(text: "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±—É–¥—É—â–µ–µ", alignment: .leading)

                            ArticleView(text: "–†–∞–±–æ—Ç–∞, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –ø–æ–∫—É–ø–∫–∞, –ø—Ä–æ–¥–∞–∂–∞ –∏ —Ç.–¥", alignment: .leading)
                        }.padding(.horizontal,35)
                        ScreenContentView(color: .clear) {
                            VStack(alignment: .leading, spacing: 20) {
                                VStack(alignment: .leading, spacing: 8) {
                                    SectionTitleView(textColor: .white, text: "–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?", alignment: .leading)
                                        .padding(.horizontal, horPadding)
                                }
                                Button {
                                    if let url = URL(string: "https://t.me/imbalanceFighter") {
                                        openURL(url)
                                    }
                                } label: {
                                    Text("–ù–∞–ø–∏—à–∏ –Ω–∞–º!")
                                }.DefButtonStyle()
                                    .sheet(isPresented: $showingSheet) {
                                        SubscriptionView()
                                    }
                                    .padding(.horizontal, horPadding)
                            }.background {
                                Image("Logo")
                                    .resizable()
                                    .aspectRatio(contentMode: .fill)
                                    .opacity(0.2)
                                    .scaleEffect(0.9)
                            }

                        }
                        ConditionsTermsView()
                    }

                }.background(BackGroundView())
                    .navigationBarHidden(true)
                    .onAppear {
                        AnalyticsWrapper.onScreanAppear("Home")
                    }
            } else {

                SectionTitleView(text: "kjk", alignment: .leading)

            }
        }.animation(Animation.easeInOut(duration: 0.25), value: animate)

    }
}

struct HomeView_Previews: PreviewProvider {
    @StateObject static var model = MainViewModel()
    @UIApplicationDelegateAdaptor(AppDelegate.self) var delegate
    static var previews: some View {
        ZStack {
            NavigationStack {
                HomeView()
                    .environmentObject(model)
            }.transition(.opacity)

        }.preferredColorScheme(.light)
            .animation(.easeInOut, value: model.screenTransitionAnimation)
    }
}
